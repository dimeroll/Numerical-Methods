#pragma once
#include <Windows.h>
#include <iostream>
#include <math.h>
using namespace std;

const double a = -10;
const double b = 10;
const int N = 100;
double X[N];
double Y[N];
double Coefficients[N];
double Matrix[N][N];

// for Spline
double vectorB[N];
double vectorA[N];
double vectorC[N];
double vectorD[N];

double Ccoef[N];
double Acoef[N];
double Bcoef[N];
double Dcoef[N];

double F(double x)
{
	return sin(10*x);
}

double Polinomial(double x)
{
	double y = 0;
	for (int i = 0; i < N; i++)
		y += Coefficients[i] * pow(x, i);

	return y;
}


void Xinit_Yinit()
{
	for (int i = 0; i < N; i++)
	{
		X[i] = a + i * 1.0 / (N - 1) * (b - a);
	}

	for (int i = 0; i < N; i++)
		Y[i] = F(X[i]);
}

void MatrixInit()
{
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			Matrix[i][j] = pow(X[i], j);
}

void SLAEsolution()
{
	double L_Matrix[N][N];
	double U_Matrix[N][N];

	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			U_Matrix[i][j] = 0;
			if (i == j) L_Matrix[i][i] = 1;
			else L_Matrix[i][j] = 0;
		}
	}

	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			if (i <= j)
			{
				double Sum = 0;
				for (int k = 0; k <= i - 1; k++)
					Sum += L_Matrix[i][k] * U_Matrix[k][j];

				U_Matrix[i][j] = Matrix[i][j] - Sum;

			}

			if (i > j)
			{
				double Sum = 0;
				for (int k = 0; k <= j - 1; k++)
					Sum += L_Matrix[i][k] * U_Matrix[k][j];

				L_Matrix[i][j] = (Matrix[i][j] - Sum) / U_Matrix[j][j];
			}
		}

	double z[N];
	z[0] = Y[0] / L_Matrix[0][0];
	for (int i = 1; i < N; i++)
	{
		double subtrahend = 0;
		for (int j = 0; j <= i - 1; j++)
			subtrahend += L_Matrix[i][j] * z[j];

		z[i] = (Y[i] - subtrahend) / L_Matrix[i][i];
	}

	Coefficients[N - 1] = z[N - 1] / U_Matrix[N - 1][N - 1];
	for (int i = N - 2; i >= 0; i--)
	{
		double subtrahend = 0;
		for (int j = N - 1; j > i; j--)
			subtrahend += U_Matrix[i][j] * Coefficients[j];

		Coefficients[i] = (z[i] - subtrahend) / U_Matrix[i][i];
	}
}

double LagrangePolynomial(double x)
{
	double res = 0;
	for (int i = 0; i < N; i++)
	{
		double term = Y[i];
		for (int j = 0; j < N; j++)
		{
			if (i != j)
				term = term / (X[i] - X[j]) * (x - X[j]);
		}
		res += term;
	}

	return res;
}

double DividedDifferences(int n1, int n2)
{
	if (n1 == n2)
		return Y[n1];
	else
		return (DividedDifferences(n1 + 1, n2) - DividedDifferences(n1, n2 - 1)) / (X[n2] - X[n1]);
}

double NewtonPolynomial(double x)
{
	double res = 0;
	for (int i = 0; i < N; i++)
	{
		double term = 1;
		for (int j = 0; j < i; j++)
			term = term * (x - X[j]);

		term = term * DividedDifferences(0, i);
		res += term;
	}

	return res; 
}

void vectorAinit()
{
	vectorA[1] = 0;
	for (int i = 2; i < N; i++)
	{
		vectorA[i] = (b - a) / (N - 1);
	}
}

void vectorBinit()
{
	for (int i = 0; i < N; i++)
	{
		vectorB[i] = 4 * (b - a) / (N - 1);
	}
}

void vectorCinit()
{
	for (int i = 0; i < N - 2; i++)
	{
		vectorC[i] = (b - a) / (N - 1);
	}
    
	vectorC[N - 2] = 0;
}

void vectorDinit()
{
	for (int i = 1; i <= N - 2; i++)
	{
		double h = (b - a) / (N - 1);
		vectorD[i] = 3 * (Y[i+1] - 2*Y[i] + Y[i-1]) / h;
	}
}

void TridiagonalSolution()
{
	double vectorCC[N];
	double vectorDD[N];

	vectorCC[1] = vectorC[1] / vectorB[1];
	for(int i = 2; i <= N - 3; i++)
		vectorCC[i] = vectorC[i] / (vectorB[i] - vectorCC[i - 1] * vectorA[i]);

	vectorDD[1] = vectorD[1] / vectorB[1];
	for (int i = 2; i <= N - 2; i++)
		vectorDD[i] = (vectorD[i] - vectorDD[i-1] * vectorA[i]) / (vectorB[i] - vectorCC[i-1] * vectorA[i]);

	Ccoef[N - 2] = vectorDD[N - 2]; 
	for (int i = N - 3; i >= 1; i--)
	{
		Ccoef[i] = vectorDD[i] - vectorCC[i] * Ccoef[i + 1];
	}

	Ccoef[0] = 0;
	Ccoef[N - 1] = 0;
}

void Acoefinit()
{
	for (int i = 0; i < N; i++)
		Acoef[i] = Y[i];
}

void Dcoefinit()
{
	double h = (b - a) / (N - 1);
	for (int i = 1; i < N; i++)
		Dcoef[i] = (Ccoef[i] - Ccoef[i - 1]) / (3 * h);
}

void Bcoefinit()
{
	double h = (b - a) / (N - 1);
	for (int i = 1; i < N; i++)
		Bcoef[i] = (Acoef[i] - Acoef[i - 1]) / h + (2 * Ccoef[i] + Ccoef[i - 1]) * h / 3;
}

double CubicSpline(double x, int i)
{
	return Acoef[i] + Bcoef[i] * (x - X[i]) + Ccoef[i] * pow(x - X[i], 2) + Dcoef[i] * pow(x - X[i], 3);
}

namespace Lab4NM {

	using namespace System;
	using namespace System::ComponentModel;
	using namespace System::Collections;
	using namespace System::Windows::Forms;
	using namespace System::Data;
	using namespace System::Drawing;

	/// <summary>
	/// ������ ��� MyForm
	/// </summary>
	public ref class MyForm : public System::Windows::Forms::Form
	{
	public:
		MyForm(void)
		{
			InitializeComponent();
			//
			//TODO: �������� ��� ������������
			//
		}

	protected:
		/// <summary>
		/// ���������� ��� ������������ �������.
		/// </summary>
		~MyForm()
		{
			if (components)
			{
				delete components;
			}
		}
	private: System::Windows::Forms::DataVisualization::Charting::Chart^ chart1;
	private: System::Windows::Forms::Button^ button1;
	protected:

	private:
		/// <summary>
		/// ������������ ���������� ������������.
		/// </summary>
		System::ComponentModel::Container ^components;

#pragma region Windows Form Designer generated code
		/// <summary>
		/// ��������� ����� ��� ��������� ������������ � �� ��������� 
		/// ���������� ����� ������ � ������� ��������� ����.
		/// </summary>
		void InitializeComponent(void)
		{
			System::Windows::Forms::DataVisualization::Charting::ChartArea^ chartArea1 = (gcnew System::Windows::Forms::DataVisualization::Charting::ChartArea());
			System::Windows::Forms::DataVisualization::Charting::Legend^ legend1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Legend());
			System::Windows::Forms::DataVisualization::Charting::Series^ series1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series2 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series3 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series4 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series5 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series6 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series7 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			System::Windows::Forms::DataVisualization::Charting::Series^ series8 = (gcnew System::Windows::Forms::DataVisualization::Charting::Series());
			this->chart1 = (gcnew System::Windows::Forms::DataVisualization::Charting::Chart());
			this->button1 = (gcnew System::Windows::Forms::Button());
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chart1))->BeginInit();
			this->SuspendLayout();
			// 
			// chart1
			// 
			chartArea1->Name = L"ChartArea1";
			this->chart1->ChartAreas->Add(chartArea1);
			legend1->Name = L"Legend1";
			this->chart1->Legends->Add(legend1);
			this->chart1->Location = System::Drawing::Point(-3, -3);
			this->chart1->Name = L"chart1";
			series1->BorderWidth = 2;
			series1->ChartArea = L"ChartArea1";
			series1->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series1->Color = System::Drawing::Color::DodgerBlue;
			series1->Legend = L"Legend1";
			series1->MarkerBorderColor = System::Drawing::Color::White;
			series1->Name = L"F(x)";
			series2->BorderColor = System::Drawing::Color::White;
			series2->BorderWidth = 6;
			series2->ChartArea = L"ChartArea1";
			series2->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series2->Color = System::Drawing::Color::Orange;
			series2->Legend = L"Legend1";
			series2->Name = L"Polinomial(x)";
			series3->BorderWidth = 3;
			series3->ChartArea = L"ChartArea1";
			series3->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Point;
			series3->Color = System::Drawing::Color::Black;
			series3->IsVisibleInLegend = false;
			series3->Legend = L"Legend1";
			series3->Name = L"Dots";
			series3->YValuesPerPoint = 2;
			series4->BorderWidth = 2;
			series4->ChartArea = L"ChartArea1";
			series4->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series4->Color = System::Drawing::Color::Black;
			series4->IsVisibleInLegend = false;
			series4->Legend = L"Legend1";
			series4->Name = L"Xaxis";
			series5->BorderWidth = 2;
			series5->ChartArea = L"ChartArea1";
			series5->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series5->Color = System::Drawing::Color::Black;
			series5->IsVisibleInLegend = false;
			series5->Legend = L"Legend1";
			series5->Name = L"Yaxis";
			series6->BorderWidth = 4;
			series6->ChartArea = L"ChartArea1";
			series6->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series6->Color = System::Drawing::Color::LawnGreen;
			series6->Legend = L"Legend1";
			series6->Name = L"Lagrange Polynomial";
			series7->BorderWidth = 2;
			series7->ChartArea = L"ChartArea1";
			series7->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Spline;
			series7->Color = System::Drawing::Color::Fuchsia;
			series7->Legend = L"Legend1";
			series7->Name = L"Newton Polynomial";
			series8->BorderWidth = 3;
			series8->ChartArea = L"ChartArea1";
			series8->ChartType = System::Windows::Forms::DataVisualization::Charting::SeriesChartType::Line;
			series8->Color = System::Drawing::Color::FromArgb(static_cast<System::Int32>(static_cast<System::Byte>(192)), static_cast<System::Int32>(static_cast<System::Byte>(0)),
				static_cast<System::Int32>(static_cast<System::Byte>(192)));
			series8->Legend = L"Legend1";
			series8->Name = L"Spline";
			this->chart1->Series->Add(series1);
			this->chart1->Series->Add(series2);
			this->chart1->Series->Add(series3);
			this->chart1->Series->Add(series4);
			this->chart1->Series->Add(series5);
			this->chart1->Series->Add(series6);
			this->chart1->Series->Add(series7);
			this->chart1->Series->Add(series8);
			this->chart1->Size = System::Drawing::Size(1386, 807);
			this->chart1->TabIndex = 0;
			this->chart1->Text = L"chart1";
			this->chart1->Click += gcnew System::EventHandler(this, &MyForm::chart1_Click);
			// 
			// button1
			// 
			this->button1->Location = System::Drawing::Point(1188, 138);
			this->button1->Name = L"button1";
			this->button1->Size = System::Drawing::Size(115, 49);
			this->button1->TabIndex = 1;
			this->button1->Text = L"���������� ������� ";
			this->button1->UseVisualStyleBackColor = true;
			this->button1->Click += gcnew System::EventHandler(this, &MyForm::button1_Click);
			// 
			// MyForm
			// 
			this->AutoScaleDimensions = System::Drawing::SizeF(8, 16);
			this->AutoScaleMode = System::Windows::Forms::AutoScaleMode::Font;
			this->ClientSize = System::Drawing::Size(1384, 808);
			this->Controls->Add(this->button1);
			this->Controls->Add(this->chart1);
			this->Name = L"MyForm";
			this->Text = L"MyForm";
			(cli::safe_cast<System::ComponentModel::ISupportInitialize^>(this->chart1))->EndInit();
			this->ResumeLayout(false);

		}
#pragma endregion
	private: System::Void chart1_Click(System::Object^ sender, System::EventArgs^ e) {
	}
	private: System::Void button1_Click(System::Object^ sender, System::EventArgs^ e) 
	{
		Xinit_Yinit();
		MatrixInit();
		SLAEsolution();

		double maxY = Y[0], minY = Y[0];
		
		double step = 0.1;
		double x = a, y;
		this->chart1->Series[0]->Points->Clear();        
		
		while (x <= b)
		{
			y = F(x);
			if (y > maxY) maxY = y;
			if (y < minY) minY = y;
			this->chart1->Series[0]->Points->AddXY(x, y);
			x += step;
		}

		double x1 = a - 0.3, y1;
		this->chart1->Series[1]->Points->Clear();

		/*while (x1 <= b + 0.3)
		{
			y1 = Polinomial(x1);
			if (y1 > maxY) maxY = y1;
			if (y1 < minY) minY = y1;
			this->chart1->Series[1]->Points->AddXY(x1, y1);
			x1 += step;
		}*/

		this->chart1->Series[2]->Points->Clear();
		for (int i = 0; i < N; i++)
		{
			this->chart1->Series[2]->Points->AddXY(X[i], Y[i]);
		}

		double x3 = a - 1;
		this->chart1->Series[3]->Points->Clear();
		while (x3 <= b + 1)
		{
			this->chart1->Series[3]->Points->AddXY(x3, 0);
			x3 += step;
		}
		
		/*double x5 = a - 0.3, y5;
		this->chart1->Series[5]->Points->Clear();

		while (x5 <= b + 0.3)
		{
			y5 = LagrangePolynomial(x5);
			if (y5 > maxY) maxY = y5;
			if (y5 < minY) minY = y5;
			this->chart1->Series[5]->Points->AddXY(x5, y5);
			x5 += step;
		}

		double x6 = a - 0.3, y6;
		this->chart1->Series[6]->Points->Clear();

		while (x6 <= b + 0.3)
		{
			y6 = NewtonPolynomial(x6);
			if (y6 > maxY) maxY = y6;
			if (y6 < minY) minY = y6;
			this->chart1->Series[6]->Points->AddXY(x6, y6);
			x6 += step;
		}*/

		// SPLINE
		vectorAinit();
		vectorBinit();
		vectorCinit();
		vectorDinit();
		TridiagonalSolution();
		Acoefinit();
		Bcoefinit();
		Dcoefinit();

		double x7 = a - 0.3, y7;
		this->chart1->Series[7]->Points->Clear();

		for (int i = 1; i <= N - 1; i++)
		{   
			double rightBorder;
			if (i == N - 1)
				rightBorder = X[N - 1] + 0.3;
			else
				rightBorder = X[i];

			while (x7 <= rightBorder)
			{
				y7 = CubicSpline(x7, i);
				if (y7 > maxY) maxY = y7;
				if (y7 < minY) minY = y7;
				this->chart1->Series[7]->Points->AddXY(x7, y7);
				x7 += step;
			}
		}

		double y4 = minY - 2;
		this->chart1->Series[4]->Points->Clear();
		while (y4 <= maxY + 2)
		{
			this->chart1->Series[4]->Points->AddXY(0, y4);
			y4 += step;
		}
	}
};

}
